html(lang="en")
    head
        include head
        title Biodivergent Sites and Sounds: map
        style.
            #map{
                width:100%;
                height:100%;
                position:absolute;
                top:0;
                left:0;
                z-index:0;
                bottom:0;
                right:0;
                margin:auto;
            }
             #backdrop {
                background-color:navy;
                transition: filter 1s;
                overflow:hidden;
                touch-action:none;
                user-select:none;
                -webkit-user-select: none; /* Safari */
                background-image:url("element_painting.svg");
                background-size:cover;
                background-repeat:no-repeat;
                background-position:center;
                height:100vh;
                width:100vw;
                //- filter: hue-rotate(180deg);
            }
    script(src="https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.7.7/dat.gui.min.js")
    
    body 
        main
        #backdrop
        include map/map2.html
    script.
        // localstorage || markers
        const markers = JSON.parse(localStorage.getItem('markers')) || {
            elements: { 
                "circle_0": { "cx": 119.71634076955372, "cy": 484.0905827769419 }, 
                "circle_1": { "cx": 317.2495086860942, "cy": 572.643804075891 }, 
                "circle_2": { "cx": 618.3049498527275, "cy": 558.4834872089119 }, 
                "circle_3": { "cx": 838.6911389349964, "cy": 440.7490527601186 }, 
                "circle_4": { "cx": 1187.6359383152555, "cy": 458.8620426753175 } }
        }

        let gui = new dat.GUI();
        let circleObject = {
            main:document.querySelector('#circle_0'),
            centre:document.querySelector('#circle_0_centre'),
            centre2:document.querySelector('#circle_0_centre2'),
            halo:document.querySelector('#circle_0_halo'),
        }

        class CircleMarker{
            constructor(cx = 100, cy = 100, index = 0){
                this.cx = cx;
                this.cy = cy;

                this.elements = {
                    main:circleObject.main.cloneNode(),
                    centre:circleObject.centre.cloneNode(),
                    centre2:circleObject.centre2.cloneNode(),
                    halo:circleObject.halo.cloneNode()
                }

                Object.values(this.elements).forEach((element)=>{
                    element.setAttribute('cx', cx);
                    element.setAttribute('cy', cy);
                    element.id = element.id.replace('0',index)
                })

                document.querySelector('#circles').appendChild(this.elements.halo);
                document.querySelector('#circles_interact').appendChild(this.elements.main);
                document.querySelector('#circles_centres_outer').appendChild(this.elements.centre);
                document.querySelector('#circles_centres').appendChild(this.elements.centre2);
                Object.assign(this.elements, this);
            }
        }

        let circleMarkers = [circleObject]
        let positionFolder = gui.addFolder('positions');
        let elementFolders = [positionFolder.addFolder('element 1')]
 

        let parameters = {
            marker_0_cx:       elementFolders[0].add(markers.elements.circle_0, 'cx', 0, 1600),
            marker_0_cy:       elementFolders[0].add(markers.elements.circle_0, 'cy', 0, 789),
        }
    
       for(let i=0; i<4; i++){
            circleMarkers.push(new CircleMarker(100,100,i+1));
            elementFolders.push(positionFolder.addFolder(`element ${i+2}`))
            parameters[`marker_${i+1}_cx`] = elementFolders[i+1].add(markers.elements[`circle_${i+1}`], 'cx', 0, 1600);
            parameters[`marker_${i+1}_cy`] = elementFolders[i+1].add(markers.elements[`circle_${i+1}`], 'cy', 0, 789);
        }

        gui.add({get:getLS}, 'get')
        gui.add({save:setLS}, 'save');

        function setLS(){
            localStorage.setItem('markers', JSON.stringify(markers));
        }

        function getLS(){
            let markers = JSON.parse(localStorage.getItem('markers'));
            if(markers){
                Object.entries(markers.elements).forEach(([key, value],i) => {
                    document.querySelectorAll(`#circle_${i},#circle_${i}_centre,#circle_${i}_centre2, #circle_${i}_halo`).forEach((circle)=>{
                        circle.setAttribute('cx', value.cx);
                        circle.setAttribute('cy', value.cy);
                    })
                })
            }
        }

        let numberOfCircles = 5;
        for(let i=0; i<numberOfCircles;i++){
            parameters[`marker_${i}_cx`].onChange((value)=>{
                document.querySelectorAll(`#circle_${i},#circle_${i}_centre,#circle_${i}_centre2, #circle_${i}_halo`).forEach((circle)=>{
                    circle.setAttribute('cx', value);
                })
            })
            parameters[`marker_${i}_cy`].onChange((value)=>{
                document.querySelectorAll(`#circle_${i},#circle_${i}_centre,#circle_${i}_centre2, #circle_${i}_halo`).forEach((circle)=>{
                    circle.setAttribute('cy', value);
                })
            })
        }

        window.addEventListener('load',()=>{
            
            touch.setAction('.visual',{
                start:function(element,e,obj){
                    console.log('start')
                    element.style.opacity=0.2;
                },
                enter:function(element,e,obj){
                    console.log('enter')
                    element.style.opacity=0.2;
                },
                move:function(element,e,obj){
                    let {x,y} = obj.relative;
                    let {max_x, max_y} = obj.relative.range;
                    console.log('move', x, y)
                },
                end:function(element,e,obj){
                    console.log('end')
                    element.style.opacity=0.1;
                },
                leave:function(element,e,obj){
                    console.log('leave')
                    element.style.opacity=0.1;
                }
            })

            touch.setAction('.circle_interact',{
                start:function(element,e,obj){
                    let {id} = element;
                    //- let halo = document.querySelector(`.circle_halo[data-id="${id}"]`);
                    
                },
                enter:function(element,e,obj){
                    let {id} = element;
                    //- let halo = document.querySelector(`.circle_halo[data-id="${id}"]`);
                },
                move:function(element,e,obj){
                    let {id} = element;
                    //- let halo = document.querySelector(`.circle_halo[data-id="${id}"]`);
                    let {x,y} = obj.relative;
                    let {max_x, max_y} = obj.relative.range;
                    console.log('move', x, y)
                },
                end:function(element,e,obj){
                    let {id} = element;
                    let halo = document.querySelector(`.circle_halo[data-id="${id}"]`);
                },
                leave:function(element,e,obj){
                    let {id} = element;
                    let halo = document.querySelector(`.circle_halo[data-id="${id}"]`);
                }
            })

            getLS();
            const params = new URLSearchParams(location.search);
            if(!params.has('edit'))gui.hide();
        })