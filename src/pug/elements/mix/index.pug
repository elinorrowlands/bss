html(lang="en")
    head
        meta(charset="UTF-8")
        meta(name="viewport", content="width=device-width, initial-scale=1.0")
        title BSS: mix
        script(src="../../main.js" defer)
        script(src="https://cdnjs.cloudflare.com/ajax/libs/tone/14.7.77/Tone.js")
        link(rel='stylesheet' href='../../style.css')
        link(rel="preconnect" href="https://fonts.googleapis.com")
        link(rel="preconnect" href="https://fonts.gstatic.com" crossorigin)
        link(href="https://fonts.googleapis.com/css2?family=Kanit:wght@100;200&family=Nunito:wght@200&display=swap" rel="stylesheet")
        style.
            button{
                font-size: 2rem;
            }

            .mute{
                width:2rem;
                height:2rem;
                margin:2rem;
            }

            #crossFader{
                width:80%;
            }

            body {
                background-color:navy;
                transition: filter 1s;
                overflow:hidden;
                touch-action:none;
                user-select:none;
                -webkit-user-select: none; /* Safari */
                background-image:url("../../bg1.svg");
                background-size:cover;
                background-repeat:no-repeat;
                background-position:center;
                height:100vh;
                width:100vw;
            }

            .waveform{
                position:absolute;
                height:100%;
                top:0;
                bottom:0;
                left:0;
                right:0;
                margin:auto;
            }

            .waveform#left{
                right:auto;
                left:2em;
            }

            .waveform#right{
                left:auto;
                right:2em;
            }

            .main__background{
                
                position:relative;
                height:100%;
                width:100%;
                top:0;
                bottom:0;
                left:0;
                right:0;
                background: linear-gradient(90deg, #F9D423 0%, rgba(32,42,68,0.4) 100%);
                display:block;
                opacity:0.8;
            }

            .main__qr{
                background: linear-gradient(90deg, rgba(249,212,35,0.5) 0%, rgba(32,42,68,0.4) 100%);
            }
    body
        main.main__qr
            //- .main__background
            include L.svg 
            include R.svg
            .bar
                button.button#start START
            .bar(style="width:100%;")
                input#crossFader(type="range" min="0" max="1" step="0.01" value="0.5")
        include ../../loading
    script.
        function loaded(){
                // todo: add load status message for screen readers
                document.querySelectorAll('.loading').forEach(element => {
                    element.style.opacity = 0;
                    setTimeout(() => {
                        element.style.display = 'none';
                    }, 1000);
                });
        }

        function start(){
            loaded();
        }

        let mix = {
            channels:[new Tone.Channel(), new Tone.Channel()],
            meters:[new Tone.Meter(), new Tone.Meter()],
            filter: new Tone.Filter(200, "lowpass"),
            reverb: new Tone.Reverb(2).toDestination(),
            reverbChannel: new Tone.Channel(),
            active:[true, true],
            crossFader: new Tone.CrossFade(0.5)
            
        }

        mix.reverbChannel.connect(mix.filter);
        mix.filter.connect(mix.reverb);
        mix.crossFader.toDestination();

        // the channels could fade to the filter/reverb according to mutes, so reverb is only used for the channels not currently going to the stereo out
        let sounds = [
            new Tone.Player("channels_L.mp3"),
            new Tone.Player("channels_R.mp3")
        ]

        Tone.loaded().then(start);

        sounds.forEach((sound,i) => {
            sound.connect(mix.channels[i]);
            sound.connect(mix.meters[i]);
            sound.connect(mix.reverbChannel);
            mix.channels[i].pan.value = 0.5 - i;
            mix.channels[i].connect(i === 0 ? mix.crossFader.a : mix.crossFader.b);
        })
        
        let startButton = document.querySelector("#start");
        let playFlag = false;
        
        startButton.addEventListener("click", () => {
            playFlag = !playFlag;
            start.innerHTML = playFlag ? "STOP" : "START";
            sounds.forEach(sound => {
                sound[playFlag ? 'start' : 'stop']()
            })
        })
      
        document.querySelector('#crossFader').addEventListener("input", (e) => {
            let value = parseFloat(e.target.value);
            console.log(value)
            let percentage = value * 100;
            //- document.querySelector('main').style.background = `linear-gradient(90deg,  rgba(249,212,35,0.5) ${50-(percentage/2)}%, rgba(32,42,68,0.4) ${50+(percentage/2)}%)`;
            let leftValue = 50-(percentage/2);
            let rightValue = 50+(percentage/2);
            document.querySelector('main').style.background = `linear-gradient(90deg,  rgba(249,212,35,0.5) ${leftValue}%, rgba(32,42,68,0.4) ${rightValue}%)`;
            mix.crossFader.fade.rampTo(value, 0.1, Tone.now())
            mix.channels.forEach((channel,i) => {
                let balance = 0.5*(i-value);
                console.log(i, value, balance)
                channel.pan.rampTo(balance, 0.1, Tone.now())
            })
        })